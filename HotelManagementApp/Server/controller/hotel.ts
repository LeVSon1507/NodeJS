import express, { NextFunction, Response, Request } from "express";
import { Hotel } from "../models/Hotel";
import { Transaction } from "../models/Transaction";
import { IRoom, Room } from "../models/Room";

const hotelRouter = express.Router();

export const getHotel = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const hotels = await Hotel.find();
    res.status(200).json({
      result: hotels,
    });
  } catch (error) {
    next(error);
  }
};

//-----------------Get count----------------
export const getCount = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    // -----------------Count by city-----------------
    const hotelsCountByCity = {
      hanoi: await Hotel.countDocuments({ city: "Ha Noi" }),
      hcm: await Hotel.countDocuments({ city: "Ho Chi Minh" }),
      danang: await Hotel.countDocuments({ city: "Da Nang" }),
    };
    //-----------------Count by property type-----------------
    const countByPropertyType = {
      hotel: await Hotel.countDocuments({ type: "hotel" }),
      apartments: await Hotel.countDocuments({ type: "apartments" }),
      resorts: await Hotel.countDocuments({ type: "resorts" }),
      villas: await Hotel.countDocuments({ type: "villas" }),
      cabins: await Hotel.countDocuments({ type: "cabins" }),
    };

    //-----------------Top 3 rated hotels-----------------
    //-1 l√† th·ª© t·ª± gi·∫£m d·∫ßn, 1 l√† th·ª© t·ª± tƒÉng d·∫ßn
    const topRates = await Hotel.find().sort({ rating: -1 }).limit(3);
    res.status(200).json({
      result: {
        countByCity: hotelsCountByCity,
        countByType: countByPropertyType,
        topRates: topRates,
      },
    });
  } catch (error) {
    next(error);
  }
};

// export const searchHotel = async (
//   req: Request,
//   res: Response,
//   next: NextFunction
// ) => {
//   try {
//     const { city, dateStart, dateEnd, numPeople, numRooms } = req.body;
//     // write a function to get all hotel available in a city on a date range and number of people and number of rooms needed to book for that date range and city and return the list of hotel available in that city on that date range and number of people and number of rooms needed to book for that date range and city 
  
//     const hotelFilter = await Hotel.find({ city })
//     const dayBooked = await Transaction.find({
//       $and: [
//         { dateStart: { $lte: dateEnd } },
//         { dateEnd: { $gte: dateStart } },
//       ],
//     });
//     const hotelBooked = dayBooked.map((item) => item.hotel);
//     const hotelAvailable = hotelFilter.filter(
//       (item) => !hotelBooked.includes(item._id)
//     );
//       // const hotelAvailable = await Hotel.find({
//       //   $and: [
//       //     { city },
//       //     { rooms: { $elemMatch: { numPeople: { $gte: numPeople } } } },
//       //     { rooms: { $elemMatch: { numRooms: { $gte: numRooms } } } },
//       //   ],
//       // });
    

//     res.status(200).json({ results: hotelAvailable });
//   } catch (error) {
//     next(error);
//   }
// };


export const searchHotel = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { city, dateStart, dateEnd, numPeople, numRooms } = req.body;

    // T√¨m t·∫•t c·∫£ c√°c kh√°ch s·∫°n trong th√†nh ph·ªë ƒë∆∞·ª£c y√™u c·∫ßu
    const hotels = await Hotel.find({ city });
    // T√¨m t·∫•t c·∫£ c√°c giao d·ªãch c√≥ ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c n·∫±m trong kho·∫£ng th·ªùi gian ƒë∆∞·ª£c y√™u c·∫ßu
    const dayBooked = await Transaction.find({
      $and: [
        { dateStart: { $in: dateStart } },
        { dateEnd: { $in: dateEnd } },
      ],
    });
    console.log("üöÄ ~ file: hotel.ts:113 ~ dayBooked:", dayBooked)
    // L·ªçc ra danh s√°ch c√°c ph√≤ng c·ªßa c√°c kh√°ch s·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian ƒë∆∞·ª£c y√™u c·∫ßu
    const roomBooked = dayBooked.map((item) => {
      console.log("üöÄ ~ file: hotel.ts:115 ~ roomBooked ~ item:", item)
      return item.room
    })
    console.log("üöÄ ~ file: hotel.ts:118 ~ roomBooked ~ roomBooked:", roomBooked)
    // L·ªçc ra danh s√°ch c√°c kh√°ch s·∫°n c√≥ √≠t nh·∫•t m·ªôt ph√≤ng c√≤n tr·ªëng
    const hotelAvailable = hotels.filter(
      (item) => !roomBooked.includes(item._id)
    );
   

  


    // Tr·∫£ v·ªÅ danh s√°ch c√°c kh√°ch s·∫°n c√≥ s·∫µn
    res.status(200).json({results: hotelAvailable });
  } catch (error) {
    next(error);
  }
};




//-----------------Get hotel detail----------------
export const getHotelDetail = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.query;
    const hotelDetail = await Hotel.findById(id);
    // const roomsList = await hotelDetail?.rooms?.map((room:IRoom) => {
    //    return  Room.findById(room._id)
    // })
    const roomsList = await Room.find({
      _id: { $in: hotelDetail?.rooms },
    }).exec();
    // .find() tr·∫£ v·ªÅ m·ªôt query, ch·ª©a t·∫•t c·∫£ c√°c t√†i li·ªáu trong b·∫£ng Room.

    //$in s·∫Ω tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c t√†i li·ªáu trong b·∫£ng Room c√≥ tr∆∞·ªùng _id n·∫±m trong danh s√°ch c√°c gi√° tr·ªã _id c·ªßa c√°c ph·∫ßn t·ª≠ trong m·∫£ng hotelDetail.rooms.

    //.exec() ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th·ª±c thi query v√† tr·∫£ v·ªÅ m·ªôt promise, ch·ª©a danh s√°ch c√°c ph√≤ng c·ªßa kh√°ch s·∫°n.
    res.status(200).json({ results: hotelDetail, roomsList: roomsList });
  } catch (error) {
    next(error);
  }
};
export default hotelRouter;
